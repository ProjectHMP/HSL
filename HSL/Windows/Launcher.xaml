<Window x:Class="HSL.Windows.Launcher"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:HSL"
        xmlns:enums="clr-namespace:HSL.Enums"
        mc:Ignorable="d"
        Title="Happiness Server Launcher" Height="447" Width="826"

        WindowStartupLocation="CenterScreen"
        >
    <Window.Resources>
        <Style x:Key="viewGridStyle" TargetType="{x:Type Grid}">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Visibility" Value="Hidden"></Setter>
                    <Setter Property="IsHitTestVisible" Value="False"></Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid Background="{StaticResource bgColor}">

        <!-- I decided to combine all "views" into one Window -->

        <!-- Grid Definitions -->

        <Grid x:Name="view_settings" Panel.ZIndex="1" Visibility="Hidden" Grid.ColumnSpan="2"/>

        <!-- Launcher View -->
        <Grid x:Name="view_launcher" Grid.ColumnSpan="2">
            <!-- Grid Definitions -->
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!-- Left Panel -->
            <Grid Grid.RowSpan="2" Grid.Column="0">

                <Grid.RowDefinitions>
                    <RowDefinition Height="25"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="25"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width=".3*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- Top Tool Bar -->
                <DockPanel Grid.ColumnSpan="2">
                    <Menu x:Name="menu_hmssp" HorizontalContentAlignment="Center" VerticalAlignment="Center" Background="Transparent">
                        <MenuItem Background="Transparent" Header="{DynamicResource text_file}" Foreground="{StaticResource txtColor}">
                            <MenuItem x:Name="mi_OpenServerPath" Header="{DynamicResource text_open_server_path}" UsesItemContainerTemplate="False"/>
                            <MenuItem x:Name="mi_CreateServer" Header="{DynamicResource text_create_new_server}"/>
                            <Separator/>
                            <MenuItem x:Name="mi_Language" ItemsSource="{Binding Languages}" IsChecked="{Binding IsEnabled}" DisplayMemberPath="Name" Header="Language"></MenuItem>
                            <Separator/>
                            <MenuItem Header="{DynamicResource text_about}">
                                <MenuItem x:Name="mi_OpenGithub" Header="Open Github"/>
                                <Separator/>
                                <MenuItem FontWeight="Bold" Header="Developer" IsHitTestVisible="False"/>
                                <MenuItem IsChecked="True" Header="Eazy" IsHitTestVisible="False"/>
                            </MenuItem>
                        </MenuItem>
                        <MenuItem x:Name="mi_Server" Background="Transparent" Header="{DynamicResource text_server}" >
                            <MenuItem.Style>
                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                    <Setter Property="Foreground" Value="{StaticResource txtColor}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding currentInstance, Delay=500, Mode=OneWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>
                            <MenuItem x:Name="mi_StartServer" Header="{DynamicResource text_start}">
                                <MenuItem.Style>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding currentInstance.State, Delay=100, IsAsync=True, Mode=OneWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Stopped}">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Style>
                            </MenuItem>
                            <MenuItem x:Name="mi_StopServer" Header="{DynamicResource text_stop}" DisplayMemberPath="State">
                                <MenuItem.Style>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding currentInstance.State, Delay=100, IsAsync=True, Mode=OneWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Style>
                            </MenuItem>
                            <MenuItem x:Name="mi_RestartServer" Header="{DynamicResource text_restart}">
                                <MenuItem.Style>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}" >
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding currentInstance.State, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Style>
                            </MenuItem>
                            <MenuItem x:Name="mi_OpenServerDirectory" Header="{DynamicResource text_open_directory}"/>
                            <MenuItem x:Name="mi_UpdateServer" Header="{DynamicResource text_update_server}">
                                <MenuItem.Style>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding currentInstance.State, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Stopped}">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Style>
                            </MenuItem>
                            <Separator/>
                            <MenuItem x:Name="mi_DeleteServerCache" Header="{DynamicResource text_delete_cache}">
                                <MenuItem.Style>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding currentInstance.State, Delay=500, Mode=OneWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                                <Setter Property="IsEnabled" Value="False"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Style>
                            </MenuItem>
                            <Separator/>
                            <MenuItem x:Name="mi_DeleteServer" Header="{DynamicResource text_delete}" Foreground="Red">
                                <MenuItem.Style>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding currentInstance, Delay=500, Mode=OneWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                                <Setter Property="IsEnabled" Value="False"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding currentInstance.State, Delay=500, Mode=OneWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                                <Setter Property="IsEnabled" Value="False"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Style>
                            </MenuItem>
                        </MenuItem>
                        <!-- <MenuItem Header="Settings" Foreground="{StaticResource txtColor}"></MenuItem> -->
                    </Menu>
                </DockPanel>

                <!-- Server List -->
                <ListView x:Name="lv_ServerList" Grid.Column="0" Grid.Row="1" Grid.RowSpan="2" ItemsSource="{Binding manager.servers, Delay=500, IsAsync=True, Mode=OneWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Background="Transparent" SelectionMode="Single" Foreground="{StaticResource txtColor}" BorderThickness="0 .2 0 .2" SelectedItem="{Binding currentInstance, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <ListViewItem Content="{Binding Name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsHitTestVisible="False" Padding="2" Margin="0">
                                <ListViewItem.Style>
                                    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                                        <Setter Property="Foreground" Value="{StaticResource txtColor}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding State, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                                <Setter Property="Foreground" Value="#FF01BD0C"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HasUpdate, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="{StaticResource True}">
                                                <Setter Property="BorderBrush" Value="Orange"/>
                                                <Setter Property="BorderThickness" Value="0 0 0 1"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ListViewItem.Style>
                            </ListViewItem>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>

                <!-- Console -->
                <RichTextBox x:Name="rtb_ServerLog"  DataContext="{Binding currentInstance, Delay=500, IsAsync=True, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" Background="{StaticResource cmdBgColor}" IsReadOnly="True" IsReadOnlyCaretVisible="True" BorderThickness=".2 .2 .2 0" Foreground="{StaticResource txtColor}">
                    <RichTextBox.Style>
                        <Style TargetType="{x:Type RichTextBox}">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding State, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </RichTextBox.Style>
                    <FlowDocument>
                        <Paragraph FontSize="13" Padding="2">
                            <InlineUIContainer>
                                <ItemsControl ItemsSource="{Binding ServerLog, Delay=500, IsAsync=True, Mode=OneWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" FontSize="10"/>
                            </InlineUIContainer>
                        </Paragraph>
                    </FlowDocument>
                </RichTextBox>

                <!-- Clear Console Button -->
                <Button x:Name="btn_ClearServerLog" Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" Background="Transparent" Width="40" Height="20" HorizontalAlignment="Right" VerticalAlignment="Bottom" FontSize="10" Foreground="{StaticResource txtColor}" BorderThickness=".005" Content="{DynamicResource text_clear}"/>

                <!-- Console Input -->
                <TextBox x:Name="tb_ServerCmd" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Background="{StaticResource cmdBgColor}" Foreground="{StaticResource txtColor}" VerticalContentAlignment="Center" Padding="3 0 0 0" BorderThickness="0 .2 .2 0" BorderBrush="#4682B4">
                    <TextBox.Style>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding currentInstance.State, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>

                <!-- Ghost Preview TextBox -->
                <TextBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Background="Transparent" Foreground="White" Margin="0" Padding="5 0 0 0" BorderBrush="#4682B4" VerticalContentAlignment="Center" IsHitTestVisible="False" Opacity="0.2" Text="{DynamicResource text_enter_command_here}">
                    <TextBox.Style>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="Visibility" Value="Hidden"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Text.Length, ElementName=tb_ServerCmd, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
            </Grid>

            <!-- Right Panel -->
            <Grid Grid.RowSpan="2" Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="25"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="80"/>
                </Grid.RowDefinitions>

                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding currentInstance, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                <Setter Property="IsHitTestVisible" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>

                <!-- Resource List / Resource Controls -->
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height=".5*"/>
                    </Grid.RowDefinitions>

                    <!-- Resource List -->
                    <ListView x:Name="lv_ResourceList" ItemsSource="{Binding currentInstance.Resources, Delay=500, IsAsync=True, Mode=OneWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding currentResource, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Background="Transparent" BorderThickness="0 .2 .2 .2" BorderBrush="#4682B4" Foreground="{StaticResource txtColor}">
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <ListViewItem Content="{Binding Name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsHitTestVisible="False" Padding="2" Margin="0">
                                    <ListViewItem.Style>
                                        <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                                            <Setter Property="Foreground" Value="{StaticResource txtColor}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsEnabled}" Value="{StaticResource True}">
                                                    <Setter Property="Foreground" Value="Green"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListViewItem.Style>
                                </ListViewItem>
                            </DataTemplate>
                        </ListView.ItemTemplate>

                        <ListView.Style>
                            <Style TargetType="{x:Type ListView}">
                                <Setter Property="IsHitTestVisible" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding currentInstance.State, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                        <Setter Property="IsHitTestVisible" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ListView.Style>
                    </ListView>

                    <!-- Resource Controls -->
                    <StackPanel Grid.Column="1" Orientation="Vertical" Margin="0">
                        <!-- Start Button -->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width=".3*"/>
                            </Grid.ColumnDefinitions>
                            <Button x:Name="btn_StartResource" Grid.Column="0" Content="{DynamicResource text_start}" Height="25">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" >
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SelectedIndex, ElementName=lv_ResourceList, UpdateSourceTrigger=PropertyChanged}" Value="-1">
                                                <Setter Property="IsEnabled" Value="False"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <Button x:Name="btn_StartAllResources" Grid.Column="1" Content="{DynamicResource text_all}" Height="25">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" >
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding currentInstance.State, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </Grid>
                        <!-- Stop Button -->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width=".3*"/>
                            </Grid.ColumnDefinitions>
                            <Button x:Name="btn_StopResource" Content="{DynamicResource text_stop}" Height="25">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SelectedIndex, ElementName=lv_ResourceList, UpdateSourceTrigger=PropertyChanged}" Value="-1">
                                                <Setter Property="IsEnabled" Value="False"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <Button x:Name="btn_StopAllResources" Grid.Column="1" Content="{DynamicResource text_all}" Height="25">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding currentInstance.State, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </Grid>
                        <!-- Reload Button -->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width=".3*"/>
                            </Grid.ColumnDefinitions>
                            <Button x:Name="btn_ReloadResource" Content="{DynamicResource text_reload}" Height="25">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" >
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SelectedIndex, ElementName=lv_ResourceList, UpdateSourceTrigger=PropertyChanged}" Value="-1">
                                                <Setter Property="IsEnabled" Value="False"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <Button x:Name="btn_ReloadAllResources" Grid.Column="1" Content="{DynamicResource text_all}" Height="25">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding currentInstance.State, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:ServerState.Started}">
                                                <Setter Property="IsEnabled" Value="True"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </Grid>

                        <Label Content="{DynamicResource text_automatic_settings}" Foreground="{StaticResource txtColor}" FontSize="12" HorizontalContentAlignment="Center" Padding="5" FontWeight="Bold"/>
                        <CheckBox Padding="0" VerticalAlignment="Bottom" VerticalContentAlignment="Bottom" Margin="5 0 0 0" Cursor="Hand" IsChecked="{Binding currentInstance.AutoReloadResources, FallbackValue={StaticResource False}, UpdateSourceTrigger=PropertyChanged}">
                            <Label Foreground="White" Margin="5 0 0 0" FontSize="12" Padding="0" VerticalContentAlignment="Center" Content="{DynamicResource text_reload_resources}" ToolTip="{DynamicResource text_tooltip_1}"/>
                        </CheckBox>
                        <CheckBox Padding="0" VerticalAlignment="Bottom" VerticalContentAlignment="Bottom" Margin="5 0 0 0" Cursor="Hand" IsChecked="{Binding currentInstance.AutoStart, FallbackValue={StaticResource False}, UpdateSourceTrigger=PropertyChanged}">
                            <Label Foreground="White" Margin="5 0 0 0" FontSize="12" Padding="0" VerticalContentAlignment="Center" Content="{DynamicResource text_start}" ToolTip="{DynamicResource text_tooltip_2}"/>
                        </CheckBox>
                        <CheckBox Padding="0" VerticalAlignment="Bottom" VerticalContentAlignment="Bottom" Margin="5 0 0 0" Cursor="Hand" IsChecked="{Binding currentInstance.AutoRestart, FallbackValue={StaticResource False}, UpdateSourceTrigger=PropertyChanged}">
                            <Label Foreground="White" Margin="5 0 0 0" FontSize="12" Padding="0" VerticalContentAlignment="Center" Content="{DynamicResource text_restart}" ToolTip="{DynamicResource text_tooltip_3}"/>
                        </CheckBox>
                        <CheckBox Padding="0" VerticalAlignment="Bottom" VerticalContentAlignment="Bottom" Margin="5 0 0 0" Cursor="Hand" IsChecked="{Binding currentInstance.AutoDeleteLogs, FallbackValue={StaticResource False}, UpdateSourceTrigger=PropertyChanged}">
                            <Label Foreground="White" Margin="5 0 0 0" FontSize="12" Padding="0" VerticalContentAlignment="Center" Content="{DynamicResource text_delete_logs}" ToolTip="{DynamicResource text_tooltip_4}"/>
                        </CheckBox>
                    </StackPanel>
                    <Grid Grid.Row="1" Grid.ColumnSpan="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Row="0" Grid.ColumnSpan="2" Content="{DynamicResource text_server_settings}" Foreground="{StaticResource txtColor}" FontSize="11" HorizontalContentAlignment="Center" Padding="0" Margin="0" FontWeight="Bold" VerticalContentAlignment="Center"/>

                        <Label Grid.Row="1" Grid.Column="0" Content="{DynamicResource text_hostname}" Foreground="{StaticResource txtColor}" FontSize="10" Padding="5 0 0 0" Margin="0" FontWeight="Bold" VerticalContentAlignment="Center"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding currentInstance.Hostname, IsAsync=True}" Background="{StaticResource cmdBgColor}"  Foreground="{StaticResource txtColor}" VerticalContentAlignment="Center" FontSize="13"/>

                        <Label Grid.Row="2" Grid.Column="0" Content="{DynamicResource text_port}" Foreground="{StaticResource txtColor}" FontSize="10" Padding="5 0 0 0" Margin="0" FontWeight="Bold" VerticalContentAlignment="Center"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding currentInstance.Port}"  Margin="0" Padding="2 0 0 0" Foreground="{StaticResource txtColor}" Background="{StaticResource cmdBgColor}" VerticalContentAlignment="Center" FontSize="13"/>

                        <Label Grid.Row="3" Grid.Column="0" Content="{DynamicResource text_listed}" FontSize="10" Padding="5 0 0 0" Margin="0" FontWeight="Bold" VerticalContentAlignment="Center">
                            <Label.Style>
                                <Style TargetType="{x:Type Label}">
                                    <Setter Property="Foreground" Value="#FFDC0000"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding currentInstance.Listed, FallbackValue={StaticResource False}, IsAsync=True, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="{StaticResource True}">
                                            <Setter Property="Foreground" Value="#FF07D800"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Label.Style>
                        </Label>
                        <CheckBox Grid.Row="3" Grid.Column="1" IsChecked="{Binding currentInstance.Listed, FallbackValue={StaticResource False}, IsAsync=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Background="Transparent" Foreground="White" VerticalContentAlignment="Center" FontSize="13" Margin="0 0 0 0" HorizontalAlignment="Left"/>
                        <Label Grid.Row="4" Grid.Column="0" Content="{DynamicResource text_episode}" Foreground="{StaticResource txtColor}" FontSize="10" Padding="5 0 0 0" Margin="0" FontWeight="Bold" VerticalContentAlignment="Center"/>
                        <ComboBox Grid.Row="4" Grid.Column="2"  Margin="0" Padding="0 0 0 0" FontSize="13" SelectedItem="{Binding currentInstance.Episode}" ItemsSource="{x:Static local:Constants.Episodes}" Background="{StaticResource cmdBgColor}" VerticalContentAlignment="Center">

                        </ComboBox>
                    </Grid>
                </Grid>
                <Grid Grid.Row="2" >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <Border Grid.Row="1" Background="Transparent"  BorderBrush="#4682B4" BorderThickness="0 .2 0 .2">
                        <Grid IsEnabled="{Binding currentInstance.AutoRestart, Mode=OneWay}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="20"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Label Grid.Row="0" Grid.ColumnSpan="5" Foreground="{StaticResource txtColor}" FontSize="10" VerticalContentAlignment="Center" Padding="5 0 0 0" FontWeight="Bold" Content="{DynamicResource text_autorestart_label_content}"/>
                            <Grid Grid.Row="1" >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="10"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="10"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <TextBox Grid.Column="0"  Margin="5 0 5 0" Padding="0 0 0 0" HorizontalContentAlignment="Center" Foreground="{StaticResource txtColor}" Text="{Binding currentInstance.RestartTimer_Hours, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Label Grid.Column="1" Margin="0" Padding="0" HorizontalContentAlignment="Center" Content=":" Foreground="{StaticResource txtColor}" FontWeight="Bold"/>
                                <TextBox Grid.Column="2"  Margin="5 0 5 0" Padding="0 0 0 0" HorizontalContentAlignment="Center" Foreground="{StaticResource txtColor}" Text="{Binding currentInstance.RestartTimer_Minutes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Label Grid.Column="3" Margin="0" Padding="0" HorizontalContentAlignment="Center" Content=":" Foreground="{StaticResource txtColor}" FontWeight="Bold"/>
                                <TextBox Grid.Column="4"  Margin="5 0 5 0" Padding="0 0 0 0" HorizontalContentAlignment="Center" Foreground="{StaticResource txtColor}" Text="{Binding currentInstance.RestartTimer_Seconds, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                            </Grid>
                            <Grid Grid.Row="3">
                                <RichTextBox Foreground="White" FontSize="8" Background="Transparent" Padding="5" VerticalAlignment="Bottom" BorderThickness=".2" BorderBrush="Yellow" IsReadOnly="True" IsReadOnlyCaretVisible="False" IsHitTestVisible="False">
                                    <FlowDocument>
                                        <Paragraph Foreground="Wheat">
                                            <Run>
                                                <Run.Style>
                                                    <Style TargetType="{x:Type Run}">
                                                        <Setter Property="Text" Value="{DynamicResource text_automatic_restart_notice}"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding currentInstance.AutoRestart, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="{StaticResource True}">
                                                                <Setter Property="Text" Value="{Binding currentInstance.RestartDateTime, Mode=OneWay}"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Run.Style>
                                            </Run>
                                        </Paragraph>
                                    </FlowDocument>
                                </RichTextBox>
                            </Grid>

                        </Grid>
                    </Border>
                </Grid>
            </Grid>
        </Grid>
    </Grid>
</Window>
